target Python

import FrostBase from "../frost/src/lib/FrostBase.lf"

reactor Initiator extends FrostBase{


    input channel_in
    output channel_out

    reaction(startup) -> channel_out{=
        self.logger.info(f"Initiator {self.name} started")
        message = FrostMessage(
            sender=self.name,
            target="frost_bus",
            identifier=str(uuid.uuid4()),
            header=FrostHeader(
                type=MsgType.REQUEST,
                version=(1, 0, 0),
                namespace=MsgNamespace.PROTOCOL,
                msg_name=ProtocolMsgName.REGISTER,
            ),
            payload=ProtocolPayload(),
        )
        self.logger.info(f"Initiator {self.name} sent a message: {message}")
        channel_out.set([message])
    =}

    input start
    reaction(start) -> channel_out{=
        self.logger.info(f"User {self.name} start signal received: {start.value}")
        if start.value:
            message = FrostMessage(
                sender=self.name,
                target="target",
                identifier=str(uuid.uuid4()),
                header=FrostHeader(
                    type=MsgType.REQUEST,
                    version=(1, 0, 0),
                    namespace=MsgNamespace.METHOD,
                    msg_name=MethodMsgName.INVOKE,
                ),
                payload=MethodPayload(
                    node="Methods/answer",
                    args=["What is your name?"],
                    kwargs={},
                ),
            )
            self.logger.info(f"{self.name}: {message.payload.args[0]}")
            self._set_channel_out_port(message, channel_out)
    =}

    reaction(channel_in) -> channel_out{=
        self.logger.info(f"Initiator {self.name} received a message: {channel_in.value}")
        message = channel_in.value[0]
        if message.header.type == MsgType.RESPONSE and message.header.namespace == MsgNamespace.METHOD:
            self.logger.info(f"{message.sender}: {message.payload.ret["response"]}")
    =}

}